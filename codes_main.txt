import streamlit as st
import pandas as pd
import base64
import io
import db_helper
from db_helper import load_sheet_from_db, save_sheet_to_db

def clean_df(df):
    df = df.loc[:, [col for col in df.columns if not str(col).lower().startswith("unnamed")]]
    df = df.astype(str)
    df = df.replace(['nan', 'NaN', 'None', 'NONE'], '')
    df = df.dropna(axis=1, how='all')
    df = df.loc[:, (df != '').any(axis=0)]
    return df

# --------- STYLES (backgrounds, buttons, logo, login size, etc) ---------
def set_bg_homescreen():
    with open("logo1.jpg", "rb") as img_file:
        img_bytes = img_file.read()
        encoded = base64.b64encode(img_bytes).decode()
    st.markdown(
        f"""
        <style>
        .stApp {{
            background-image: url("data:image/jpg;base64,{encoded}");
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            background-attachment: fixed;
        }}
        </style>
        """,
        unsafe_allow_html=True
    )

def set_bg_lightgreen():
    st.markdown(
        """
        <style>
        .stApp {
            background: linear-gradient(135deg, #dafde2 0%, #e5fff7 100%) !important;
            background-attachment: fixed !important;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

def show_logo_and_title(home=False):
    with open("logo.png", "rb") as image_file:
        encoded = base64.b64encode(image_file.read()).decode()
    # Use different color and shadow if home, else solid
    if home:
        title_css = "font-size:2.7rem;font-weight:900;color:#01396b;text-shadow:2px 4px 16px #f7b554b3, 0 1px 0 #fff;"
    else:
        title_css = "font-size:2.7rem;font-weight:900;color:#247158;text-shadow:0 2px 0 #e0e0e0;"
    st.markdown(
        f"""
        <div style="display:flex;align-items:center;margin-bottom:14px;margin-top:12px;">
            <img src="data:image/png;base64,{encoded}" height="110" style="margin-right:28px;border-radius:19px;box-shadow:0 4px 24px #bbb8;">
            <span style='{title_css}'>Central Automation Department</span>
        </div>
        """, unsafe_allow_html=True
    )

# Gradient Button CSS + login box small
st.markdown("""
    <style>
        /* Nav Buttons: Large, Modern Gradient, Shadow */
        .big-nav-btn button {
            width: 100% !important;
            min-height: 86px !important;
            font-size: 1.45rem !important;
            font-weight: 800 !important;
            border-radius: 30px !important;
            background: linear-gradient(90deg,#3a78b1 60%, #ffb34d 100%) !important;
            color: #fff !important;
            box-shadow: 0 7px 24px 0 #2e6eaa34;
            border: none;
            margin-bottom: 10px;
            transition: box-shadow 0.1s;
        }
        .big-nav-btn button:active, .big-nav-btn button:focus {
            filter: brightness(0.93);
            box-shadow: 0 2px 9px 0 #bfa54d49;
        }
        /* Selected sheet (universal search) */
        .sheet-btn button.selected-btn {
            background: linear-gradient(90deg,#ff9933 70%, #2e6eaa 100%) !important;
            color: #233 !important;
        }
        /* Small login box */
        .small-login {
            max-width: 275px;
            margin: 80px auto 12px auto;
            background: rgba(255,255,255,0.90);
            border-radius: 18px;
            padding: 28px 26px 14px 26px;
            box-shadow: 0 4px 18px #aad9d9a5;
        }
        .small-login label, .small-login input, .small-login button {
            font-size: 1.01rem !important;
            max-width: 180px !important;
        }
        /* Table header */
        .stDataFrame thead tr th {
            background-color: #ff9933 !important;
            color: #222 !important;
            font-weight: bold !important;
            font-size: 17px !important;
        }
    </style>
""", unsafe_allow_html=True)

# ---------- SHEETS & NAVIGATION STATE ----------
all_subsections = [
    "PLC DETAILS", "OS DETAILS", "SINGLE POINT TRIPPING", "PAIN POINT",
    "IO LIST", "CRITICAL SPARES"
]
DASHBOARD_VIEW = "dashboard"
SHEET_VIEW = "sheet"
AREA_VIEW = "area"
SEARCH_VIEW = "search"

if "login" not in st.session_state:
    st.session_state.login = None
if "main_view" not in st.session_state:
    st.session_state.main_view = DASHBOARD_VIEW
if "selected_sheet" not in st.session_state:
    st.session_state.selected_sheet = None
if "selected_area" not in st.session_state:
    st.session_state.selected_area = None
if "search_sheet" not in st.session_state:
    st.session_state.search_sheet = all_subsections[0]
if "db_uploaded" not in st.session_state:
    st.session_state.db_uploaded = False

# --- LOGIN SMALL BOX, Centered ---
ADMIN_USERS = {'admin1': 'pass1', 'danish': '1245', 'avinash': '1246'}
VIEWERS = {'user1': '1234', 'guest': 'guest'}

if st.session_state.login is None:
    set_bg_homescreen()
    show_logo_and_title(home=True)
    with st.container():
        st.markdown('<div class="small-login">', unsafe_allow_html=True)
        st.subheader("Login", divider="grey")
        login_user = st.text_input("Username")
        login_pass = st.text_input("Password", type="password")
        login_btn = st.button("Login")
        st.markdown("</div>", unsafe_allow_html=True)
    if login_btn:
        if login_user in ADMIN_USERS and login_pass == ADMIN_USERS[login_user]:
            st.session_state.login = {"user": login_user, "role": "admin"}
            st.success("Admin login successful.")
            st.rerun()
        elif login_user in VIEWERS and login_pass == VIEWERS[login_user]:
            st.session_state.login = {"user": login_user, "role": "viewer"}
            st.success("Viewer login successful.")
            st.rerun()
        else:
            st.error("Invalid username or password.")
    st.stop()

login_name = st.session_state.login["user"]
login_role = st.session_state.login["role"]
st.sidebar.markdown(f"**👤 Logged in as:** `{login_name}` ({login_role.capitalize()})")
st.markdown(f"<div style='text-align:right;font-weight:bold;color:#2e6eaa;'>User: {login_name} ({login_role})</div>", unsafe_allow_html=True)

# --- DB Upload/Init
uploaded_file = None
if login_role == "admin":
    uploaded_file = st.sidebar.file_uploader("Upload Excel (.xlsx) [admin only]", type=["xlsx"])
    if uploaded_file and not st.session_state.db_uploaded:
        xl = pd.ExcelFile(uploaded_file)
        available_sheets = [s for s in all_subsections if s in xl.sheet_names]
        if not available_sheets:
            st.error("No relevant sheets found in this Excel file.")
        else:
            skipped_sheets = []
            loaded_sheets = []
            for sheet in available_sheets:
                df = xl.parse(sheet)
                df = clean_df(df)
                if df.empty or len(df.columns) == 0:
                    skipped_sheets.append(sheet)
                    continue
                save_sheet_to_db(sheet, df)
                loaded_sheets.append(sheet)
            if not loaded_sheets:
                st.error("No sheets could be loaded from your Excel. Please check your file.")
                st.stop()
            msg = ""
            if loaded_sheets:
                msg += f"Loaded: {', '.join(loaded_sheets)}. "
            if skipped_sheets:
                msg += f"Skipped: {', '.join(skipped_sheets)}."
            st.success(f"Database refreshed! {msg}")
            st.session_state.db_uploaded = True
            st.rerun()

# ---- Always load available sheets from DB ----
available_sheets_db = []
for s in all_subsections:
    try:
        df_check = load_sheet_from_db(s)
        if not df_check.empty:
            available_sheets_db.append(s)
    except:
        pass

if not available_sheets_db:
    st.info("👈 Please (Admin) upload your Excel file once to initialize the database.")
    if st.sidebar.button("Logout"):
        st.session_state.login = None
        st.rerun()
    st.stop()

# =========== MAIN DASHBOARD VIEW ===========
if st.session_state.main_view == DASHBOARD_VIEW:
    set_bg_homescreen()
    show_logo_and_title(home=True)
    st.markdown("<div style='height:26px;'></div>", unsafe_allow_html=True)
    col1, col2, col3 = st.columns(3)
    cols = [col1, col2, col3]
    for idx, sheet in enumerate(all_subsections):
        with cols[idx % 3]:
            if st.button(f"{sheet}", key=f"btn_sheet_{sheet}", help=f"Go to {sheet}", use_container_width=True):
                st.session_state.selected_sheet = sheet
                st.session_state.main_view = SHEET_VIEW
                st.session_state.selected_area = None
            st.markdown("<div class='big-nav-btn'></div>", unsafe_allow_html=True)
    st.markdown("---")
    # Universal Search as Big Button (Centered)
    center = st.columns([1,3,1])
    with center[1]:
        if st.button("🔍 Universal Search", key="big_univ_search", use_container_width=True):
            st.session_state.main_view = SEARCH_VIEW

# =========== SHEET => AREAS VIEW ===========
elif st.session_state.main_view == SHEET_VIEW:
    set_bg_lightgreen()
    show_logo_and_title()
    sheet = st.session_state.selected_sheet
    st.markdown(f"#### {sheet}")
    df = clean_df(load_sheet_from_db(sheet))
    area_col = None
    for col in df.columns:
        if col.strip().lower() == "area":
            area_col = col
            break
    if area_col:
        df[area_col] = df[area_col].astype(str).str.strip()
        areas = sorted(df[area_col].replace(['', ' ', 'nan', 'NaN', 'None', 'NONE'], pd.NA).dropna().unique())
        st.markdown("##### Select Area:")
        areacols = st.columns(4)
        for idx, area in enumerate(areas):
            with areacols[idx % 4]:
                if st.button(area, key=f"area_{area}", use_container_width=True):
                    st.session_state.selected_area = area
                    st.session_state.main_view = AREA_VIEW
        if not areas:
            st.warning("No Area values found. Showing all data.")
            if st.button("Show All Data", use_container_width=True):
                st.session_state.selected_area = "All"
                st.session_state.main_view = AREA_VIEW
        if st.button("⬅️ Back to Dashboard"):
            st.session_state.main_view = DASHBOARD_VIEW
            st.session_state.selected_sheet = None
            st.session_state.selected_area = None
    else:
        st.warning("No 'Area' column found. Showing all data.")
        if st.button("Show Data Table", use_container_width=True):
            st.session_state.selected_area = "All"
            st.session_state.main_view = AREA_VIEW
        if st.button("⬅️ Back to Dashboard"):
            st.session_state.main_view = DASHBOARD_VIEW
            st.session_state.selected_sheet = None
            st.session_state.selected_area = None

# =========== AREA DATA TABLE VIEW ===========
elif st.session_state.main_view == AREA_VIEW:
    set_bg_lightgreen()
    show_logo_and_title()
    sheet = st.session_state.selected_sheet
    area = st.session_state.selected_area
    df = clean_df(load_sheet_from_db(sheet))
    area_col = None
    for col in df.columns:
        if col.strip().lower() == "area":
            area_col = col
            break
    if area_col and area != "All":
        filtered_df = df[df[area_col] == area]
    else:
        filtered_df = df
    st.markdown(f"#### {sheet} - {area}")
    search = st.text_input("🔎 Search in this Area...", key="search_in_area")
    if search:
        filtered_df2 = filtered_df[filtered_df.apply(lambda row: row.astype(str).str.contains(search, case=False, na=False).any(), axis=1)]
    else:
        filtered_df2 = filtered_df
    filtered_df2 = filtered_df2.astype(str).replace(['nan', 'NaN', 'None', 'NONE'], '')
    st.dataframe(filtered_df2, use_container_width=True, height=430)
    excel_buffer = io.BytesIO()
    filtered_df2.to_excel(excel_buffer, index=False)
    st.download_button(
        label="⬇️ Export Excel",
        data=excel_buffer.getvalue(),
        file_name=f"{sheet}_{area}_export.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    cols = st.columns(2)
    with cols[0]:
        if st.button("⬅️ Back to Areas"):
            st.session_state.main_view = SHEET_VIEW
            st.session_state.selected_area = None
    with cols[1]:
        if st.button("⬅️ Back to Dashboard"):
            st.session_state.main_view = DASHBOARD_VIEW
            st.session_state.selected_sheet = None
            st.session_state.selected_area = None

# =========== UNIVERSAL SEARCH VIEW ===========
elif st.session_state.main_view == SEARCH_VIEW:
    set_bg_lightgreen()
    show_logo_and_title()
    st.markdown("### Universal Search")
    # Sheet selection colored buttons in a row
    cols = st.columns(len(all_subsections))
    for idx, sheet in enumerate(all_subsections):
        with cols[idx]:
            btn_style = "selected-btn" if st.session_state.search_sheet == sheet else ""
            if st.button(sheet, key=f"search_sheet_{sheet}", use_container_width=True):
                st.session_state.search_sheet = sheet

    # Show only selected sheet table (not all tables)
    sheet = st.session_state.search_sheet
    st.markdown(f"**{sheet}**")
    df = clean_df(load_sheet_from_db(sheet))
    search = st.text_input(f"Search in {sheet}...", key=f"univ_search_{sheet}")
    if search:
        filtered_df = df[df.apply(lambda row: row.astype(str).str.contains(search, case=False, na=False).any(), axis=1)]
    else:
        filtered_df = df
    filtered_df = filtered_df.astype(str).replace(['nan', 'NaN', 'None', 'NONE'], '')
    st.dataframe(filtered_df, use_container_width=True, height=430)
    st.markdown("---")
    if st.button("⬅️ Back to Dashboard"):
        st.session_state.main_view = DASHBOARD_VIEW
        st.session_state.selected_sheet = None
        st.session_state.selected_area = None

# --- Logout ---
if st.sidebar.button("Logout"):
    st.session_state.login = None
    st.session_state.main_view = DASHBOARD_VIEW
    st.session_state.selected_sheet = None
    st.session_state.selected_area = None
    st.session_state.db_uploaded = False
    st.rerun()
